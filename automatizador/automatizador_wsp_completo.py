import time
import re
import os
import subprocess
import sys
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

class AutomatizadorWSP:
    def __init__(self):
        """Inicializar el automatizador con configuraci√≥n de Selenium"""
        self.driver = None
        self.mensaje_buen_dia_encontrado = False
        self.elemento_mensaje_buen_dia = None
        self.proveedores = {
            "Rodrigo Provee": {
                "archivo_salida": "output/lista_rodrigo.txt",
                "filtro_inicio": ["lista", "precios", "iphone", "samsung"],  # Palabras que indican inicio de lista
                "nombre_corto": "rodrigo",
                "busqueda_alternativa": ["rodrigo", "provee"]  # T√©rminos alternativos para buscar
            },
            "Kadabra Provee": {  # Simplificado
                "archivo_salida": "output/lista_kadabra.txt", 
                "filtro_inicio": ["lista", "precios", "iphone", "samsung"],
                "nombre_corto": "kadabra",
                "busqueda_alternativa": ["kadabra", "provee"]
            },
            "GcGroup": {
                "archivo_salida": "output/lista_gcgroup.txt",
                "filtro_inicio": ["lista de hoy"],  # Espec√≠fico para GcGroup
                "nombre_corto": "gcgroup",
                "busqueda_alternativa": ["gc", "group", "gcgroup"]
            }
        }
        
    def configurar_navegador(self):
        """Configurar y abrir navegador con sesi√≥n persistente"""
        print("üîß Configurando navegador...")
        
        options = webdriver.ChromeOptions()
        options.add_argument("--user-data-dir=C:/selenium_wsp")
        options.add_argument("--profile-directory=Default")
        options.add_argument("--start-maximized")
        options.add_experimental_option('excludeSwitches', ['enable-logging'])
        options.add_experimental_option('useAutomationExtension', False)
        
        try:
            self.driver = webdriver.Chrome(
                service=Service(ChromeDriverManager().install()), 
                options=options
            )
            
            print("‚úÖ Abriendo WhatsApp Web...")
            self.driver.get("https://web.whatsapp.com")
            print("‚è≥ Esperando 8 segundos para cargar WhatsApp...")
            time.sleep(15)
            return True
            
        except Exception as e:
            print(f"‚ùå Error configurando navegador: {e}")
            return False
    
    def ir_al_final_del_chat(self):
        """Ir directamente al final del chat para obtener SOLO los mensajes m√°s recientes (hoy)"""
        try:
            print("üìç Yendo al final del chat para buscar SOLO mensajes de hoy...")
            
            # Encontrar el contenedor del chat
            chat_container = None
            selectores = [
                '//div[@data-testid="chat-history"]',
                '//div[@data-testid="conversation-panel-messages"]', 
                '//div[contains(@class, "copyable-area")]'
            ]
            
            for selector in selectores:
                try:
                    chat_container = WebDriverWait(self.driver, 5).until(
                        EC.presence_of_element_located((By.XPATH, selector))
                    )
                    print(f"   ‚úÖ Contenedor encontrado con: {selector}")
                    break
                except:
                    continue
            
            if not chat_container:
                print("   ‚ö†Ô∏è No se pudo encontrar el contenedor del chat")
                return False
            
            # Ir al final del chat (mensajes m√°s recientes)
            self.driver.execute_script("arguments[0].scrollTop = arguments[0].scrollHeight;", chat_container)
            time.sleep(2)
            print("   ‚úÖ Posicionado al final del chat (mensajes m√°s recientes)")
            
            # NO hacer scroll hacia arriba - mantener solo en la zona m√°s reciente
            # Solo un peque√±o ajuste para asegurar que los mensajes est√©n completamente visibles
            self.driver.execute_script("arguments[0].scrollTop = arguments[0].scrollTop - 100;", chat_container)
            time.sleep(1)
            
            print("   üéØ Enfocado en mensajes m√°s recientes (zona de hoy)")
            return True
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error al ir al final del chat: {e}")
            return False
    
    def expandir_mensajes_largos(self):
        """Expandir mensajes que tengan 'Lee m√°s...' con m√∫ltiples pasadas"""
        try:
            print("üìñ Expandiendo mensajes largos...")
            total_expandidos = 0
            max_intentos = 5  # M√°ximo 5 pasadas para evitar bucle infinito
            
            for intento in range(max_intentos):
                # Buscar botones "Lee m√°s..." con m√∫ltiples selectores
                botones_leer_mas = []
                
                # Selector 1: Elementos span con texto
                botones_span = self.driver.find_elements(By.XPATH, 
                    '//span[contains(text(), "Lee m√°s") or contains(text(), "Read more") or '
                    'contains(text(), "Show more") or contains(text(), "Ver m√°s") or '
                    'contains(text(), "m√°s...") or contains(text(), "...")]'
                )
                botones_leer_mas.extend(botones_span)
                
                # Selector 2: Div con clase read-more-button (espec√≠fico para GcGroup)
                botones_div_class = self.driver.find_elements(By.XPATH, 
                    '//div[contains(@class, "read-more-button")]'
                )
                botones_leer_mas.extend(botones_div_class)
                
                # Selector 3: Cualquier elemento con texto "Leer m√°s"
                botones_general = self.driver.find_elements(By.XPATH, 
                    '//*[contains(text(), "Leer m√°s") or contains(text(), "Read more")]'
                )
                botones_leer_mas.extend(botones_general)
                
                # Selector 4: Elementos clickeables con role="button" que contengan "m√°s"
                botones_role = self.driver.find_elements(By.XPATH, 
                    '//div[@role="button" and contains(text(), "m√°s")]'
                )
                botones_leer_mas.extend(botones_role)
                
                # Eliminar duplicados
                botones_unicos = []
                for boton in botones_leer_mas:
                    if boton not in botones_unicos:
                        botones_unicos.append(boton)
                botones_leer_mas = botones_unicos
                
                if not botones_leer_mas:
                    if intento == 0:
                        print("   ‚ÑπÔ∏è No se encontraron mensajes para expandir")
                        # Debug: buscar elementos similares
                        debug_elements = self.driver.find_elements(By.XPATH, '//*[contains(text(), "m√°s")]')
                        if debug_elements:
                            print(f"   üîç Debug: Encontrados {len(debug_elements)} elementos con 'm√°s':")
                            for elem in debug_elements[:3]:  # Mostrar solo los primeros 3
                                print(f"     - <{elem.tag_name}> '{elem.text[:50]}...'")
                    break
                
                print(f"   üîÑ Pasada {intento + 1}: {len(botones_leer_mas)} botones encontrados")
                
                # Debug: mostrar tipos de botones encontrados
                if botones_leer_mas:
                    tipos_botones = {}
                    for boton in botones_leer_mas:
                        tipo = f"{boton.tag_name}"
                        if 'class' in boton.get_attribute('outerHTML'):
                            clases = boton.get_attribute('class')
                            if 'read-more' in clases:
                                tipo += " (read-more)"
                        tipos_botones[tipo] = tipos_botones.get(tipo, 0) + 1
                    
                    print(f"   üìä Tipos de botones: {tipos_botones}")
                
                expandidos_en_pasada = 0
                for i, boton in enumerate(botones_leer_mas):
                    try:
                        # Verificar si el bot√≥n a√∫n es visible y clickeable
                        if boton.is_displayed() and boton.is_enabled():
                            # Debug: mostrar informaci√≥n del bot√≥n
                            texto_boton = boton.text[:30] if boton.text else "Sin texto"
                            tag_name = boton.tag_name
                            print(f"     üéØ Clickeando bot√≥n {i+1}: <{tag_name}> '{texto_boton}'...")
                            
                            # Hacer scroll hacia el bot√≥n para asegurar que est√© visible
                            self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", boton)
                            time.sleep(0.5)
                            
                            # Intentar m√∫ltiples m√©todos de clic
                            click_exitoso = False
                            
                            # M√©todo 1: JavaScript click
                            try:
                                self.driver.execute_script("arguments[0].click();", boton)
                                click_exitoso = True
                                print(f"       ‚úÖ Click exitoso con JavaScript")
                            except:
                                pass
                            
                            # M√©todo 2: Click directo si el primero fall√≥
                            if not click_exitoso:
                                try:
                                    boton.click()
                                    click_exitoso = True
                                    print(f"       ‚úÖ Click exitoso directo")
                                except:
                                    pass
                            
                            # M√©todo 3: Simular Enter si los anteriores fallaron
                            if not click_exitoso:
                                try:
                                    boton.send_keys('\ue007')  # Enter
                                    click_exitoso = True
                                    print(f"       ‚úÖ Click exitoso con Enter")
                                except:
                                    print(f"       ‚ùå No se pudo hacer click")
                                    continue
                            
                            if click_exitoso:
                                expandidos_en_pasada += 1
                                time.sleep(1)  # Pausa para que se cargue el contenido expandido
                                
                                # Cada 3 clics, hacer una pausa m√°s larga para que WhatsApp procese
                                if (i + 1) % 3 == 0:
                                    print(f"       ‚è≥ Pausa de procesamiento...")
                                    time.sleep(2)
                                
                    except Exception as e:
                        print(f"       ‚ö†Ô∏è Error con bot√≥n {i+1}: {e}")
                        continue
                
                total_expandidos += expandidos_en_pasada
                print(f"   ‚úÖ Expandidos en esta pasada: {expandidos_en_pasada}")
                
                # Si no se expandi√≥ ninguno en esta pasada, salir del bucle
                if expandidos_en_pasada == 0:
                    break
                
                # Pausa entre pasadas para que WhatsApp procese los cambios
                time.sleep(2)
            
            print(f"‚úÖ Total de mensajes expandidos: {total_expandidos}")
            
            # Hacer scroll final para asegurar que todos los mensajes est√©n cargados
            if total_expandidos > 0:
                print("   üìú Haciendo scroll final para cargar contenido expandido...")
                chat_container = self.driver.find_element(By.XPATH, '//div[@data-testid="chat-history"]')
                self.driver.execute_script("arguments[0].scrollTop = 0;", chat_container)
                time.sleep(1)
                
        except Exception as e:
            print(f"‚ö†Ô∏è Error al expandir mensajes: {e}")
            print("   ‚ÑπÔ∏è Continuando con la extracci√≥n...")
    
    def filtrar_mensajes_del_dia(self, textos, filtro_inicio):
        """Filtrar mensajes que contengan 'BUEN DIA TE DEJO LA LISTA DE HOY'"""
        mensajes_filtrados = []
        
        print(f"üîç Filtrando {len(textos)} mensajes buscando 'BUEN DIA TE DEJO LA LISTA DE HOY'...")
        
        for i, texto in enumerate(textos):
            texto_upper = texto.upper()
            
            # Aceptar mensajes que contengan "BUEN DIA TE DEJO LA LISTA DE HOY" (m√°s flexible)
            if ("BUEN DIA TE DEJO LA LISTA DE HOY" in texto_upper or 
                "BUEN D√çA TE DEJO LA LISTA DE HOY" in texto_upper or
                texto_upper.startswith("BUEN DIA TE DEJO LA LISTA DE HOY") or 
                texto_upper.startswith("BUEN D√çA TE DEJO LA LISTA DE HOY")):
                
                print(f"   ‚úÖ Mensaje {i+1} aceptado: Contiene 'BUEN DIA TE DEJO LA LISTA DE HOY'")
                print(f"   üìù Longitud: {len(texto)} caracteres")
                print(f"   üìù Inicio: '{texto[:100]}...'")
                mensajes_filtrados.append(texto)
            else:
                print(f"   ‚ùå Mensaje {i+1} rechazado: No contiene la frase requerida")
                print(f"   üìù Vista previa: '{texto[:100]}...'")
                
        if not mensajes_filtrados:
            print("   ‚ö†Ô∏è NING√öN mensaje pas√≥ el filtro. Aplicando filtro de emergencia...")
            # Filtro de emergencia: aceptar cualquier mensaje que contenga "LISTA" y sea largo
            for i, texto in enumerate(textos):
                texto_upper = texto.upper()
                if ("LISTA" in texto_upper and len(texto) > 500):  # Mensajes largos con "LISTA"
                    print(f"   üÜò FILTRO DE EMERGENCIA: Aceptando mensaje {i+1} (contiene LISTA y es largo)")
                    print(f"   üìù Longitud: {len(texto)} caracteres")
                    mensajes_filtrados.append(texto)
                    break  # Solo tomar el primero que encuentre
                
        return mensajes_filtrados
    
    def verificar_chat_tiene_mensajes_hoy(self):
        """Verificar r√°pidamente si el chat tiene mensajes con la estructura espec√≠fica de GCGroup"""
        try:
            print("üîç Verificando mensajes de GCGroup con clase espec√≠fica...")
            
            # Debug: Mostrar algunos mensajes recientes
            try:
                print("   üîç Mostrando algunos mensajes recientes para debug...")
                all_messages = self.driver.find_elements(By.XPATH, '//div[contains(@class, "message-in") or contains(@class, "message-out")]//span[contains(@class, "selectable-text")]')
                recent_messages = all_messages[-15:] if len(all_messages) > 15 else all_messages
                
                for i, msg in enumerate(recent_messages):
                    try:
                        text = msg.text.strip()
                        if text and len(text) > 20:  # Solo mensajes con contenido significativo
                            print(f"   üìù Mensaje {i+1}: '{text[:150]}...'")
                    except:
                        pass
            except Exception as e:
                print(f"   ‚ö†Ô∏è Error en debug: {e}")
            
            # PRIMERA B√öSQUEDA: Con la clase CSS espec√≠fica que mencionaste
            try:
                selector_especifico = '//div[contains(@class, "x9f619") and contains(@class, "x1hx0egp") and contains(@class, "x1yrsyyn")]'
                elementos_especificos = self.driver.find_elements(By.XPATH, selector_especifico)
                print(f"   üéØ Selector espec√≠fico encontr√≥: {len(elementos_especificos)} elementos")
                
                for elemento in elementos_especificos:
                    try:
                        texto = elemento.text.strip()
                        if len(texto) > 100:  # Solo textos significativos
                            texto_upper = texto.upper()
                            
                            if ("BUEN DIA TE DEJO LA LISTA DE HOY" in texto_upper or
                                "BUEN D√çA TE DEJO LA LISTA DE HOY" in texto_upper):
                                
                                print(f"   ‚úÖ ENCONTRADO con selector espec√≠fico!")
                                print(f"   üìù Longitud: {len(texto)} caracteres")
                                print(f"   üìù Inicio: '{texto[:100]}...'")
                                
                                self.mensaje_buen_dia_encontrado = True
                                self.elemento_mensaje_buen_dia = elemento
                                return True
                                
                    except Exception as e:
                        continue
                        
            except Exception as e:
                print(f"   ‚ö†Ô∏è Error con selector espec√≠fico: {e}")
            
            # SEGUNDA B√öSQUEDA: Selectores alternativos
            selectores_alternativos = [
                '//div[contains(@class, "copyable-text")]//span[contains(@class, "selectable-text")]',
                '//span[contains(@class, "selectable-text") and contains(@class, "copyable-text")]',
                '//div[contains(@class, "message")]//span[contains(@class, "selectable-text")]'
            ]
            
            for selector in selectores_alternativos:
                try:
                    elementos = self.driver.find_elements(By.XPATH, selector)
                    print(f"   ÔøΩ Selector alternativo encontr√≥: {len(elementos)} elementos")
                    
                    for elemento in elementos:
                        try:
                            texto = elemento.text.strip()
                            if len(texto) > 100:
                                texto_upper = texto.upper()
                                
                                if ("BUEN DIA TE DEJO LA LISTA DE HOY" in texto_upper or
                                    "BUEN D√çA TE DEJO LA LISTA DE HOY" in texto_upper):
                                    
                                    print(f"   ‚úÖ ENCONTRADO con selector alternativo!")
                                    print(f"   üìù Longitud: {len(texto)} caracteres")
                                    
                                    self.mensaje_buen_dia_encontrado = True
                                    self.elemento_mensaje_buen_dia = elemento
                                    return True
                                    
                        except Exception as e:
                            continue
                            
                except Exception as e:
                    continue
            
            print("   ‚ùå No se encontr√≥ mensaje de GCGroup")
            return False
            
        except Exception as e:
            print(f"   ‚ùå Error verificando mensajes: {e}")
            return False

    def buscar_y_abrir_chat(self, nombre_proveedor, config):
        """Buscar y abrir el chat del proveedor con b√∫squeda flexible"""
        try:
            print(f"üîç Buscando chat: {nombre_proveedor}")
            
            # Buscar el campo de b√∫squeda y hacer clic para asegurar que est√© activo
            search_box = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.XPATH, '//div[@contenteditable="true"][@data-tab="3"]'))
            )
            
            # Hacer clic expl√≠cito en el campo de b√∫squeda para activarlo
            print("   üéØ Activando campo de b√∫squeda...")
            self.driver.execute_script("arguments[0].click();", search_box)
            time.sleep(1)
            
            # Intentar con el nombre completo primero
            nombres_a_probar = [nombre_proveedor] + config.get("busqueda_alternativa", [])
            
            for nombre_busqueda in nombres_a_probar:
                print(f"   üîé Probando con: '{nombre_busqueda}'")
                
                # Hacer clic nuevamente y limpiar completamente
                self.driver.execute_script("arguments[0].click();", search_box)
                time.sleep(0.5)
                
                # Limpiar usando Ctrl+A y Delete
                search_box.send_keys('\ue009' + 'a')  # Ctrl+A (seleccionar todo)
                time.sleep(0.3)
                search_box.send_keys('\ue017')  # Delete
                time.sleep(0.5)
                
                # Escribir el nombre del proveedor
                search_box.send_keys(nombre_busqueda)
                time.sleep(3)
                
                # Buscar en la lista de chats
                chat_list = self.driver.find_elements(By.XPATH, '//span[@title]')
                chat_match = None
                
                for chat in chat_list:
                    titulo = chat.get_attribute("title").lower()
                    # B√∫squeda m√°s flexible
                    if (nombre_busqueda.lower() in titulo or 
                        any(alt.lower() in titulo for alt in config.get("busqueda_alternativa", []))):
                        chat_match = chat
                        print(f"   ‚úÖ Encontrado: '{chat.get_attribute('title')}'")
                        break
                
                if chat_match:
                    # Hacer clic en el chat
                    chat_match.click()
                    time.sleep(4)
                    print(f"‚úÖ Chat abierto: {chat.get_attribute('title')}")
                    return True
            
            print(f"‚ùå No se encontr√≥ ning√∫n chat para: {nombre_proveedor}")
            return False
            
        except Exception as e:
            print(f"‚ùå Error abriendo chat {nombre_proveedor}: {e}")
            return False
    
    def extraer_mensajes_por_contenido(self):
        """Extraer mensajes bas√°ndose en el mensaje 'BUEN DIA TE DEJO LA LISTA DE HOY' encontrado"""
        try:
            print("üìù Extrayendo mensajes por an√°lisis de contenido...")
            
            # Verificar si tenemos un mensaje "BUEN DIA" marcado anteriormente
            if hasattr(self, 'mensaje_buen_dia_encontrado') and self.mensaje_buen_dia_encontrado and hasattr(self, 'elemento_mensaje_buen_dia') and self.elemento_mensaje_buen_dia:
                print("   üéØ Usando mensaje 'BUEN DIA TE DEJO LA LISTA DE HOY' encontrado anteriormente")
                try:
                    texto_completo = self.elemento_mensaje_buen_dia.text.strip()
                    if texto_completo:
                        print(f"   ‚úÖ Mensaje extra√≠do exitosamente: {len(texto_completo)} caracteres")
                        print(f"   üìù Vista previa: '{texto_completo[:150]}...'")
                        return [texto_completo]
                except Exception as e:
                    print(f"   ‚ö†Ô∏è Error extrayendo mensaje 'BUEN DIA': {e}")
            
            # Si no tenemos el mensaje guardado, buscar nuevamente con B√öSQUEDA EXHAUSTIVA
            print("   üîç Buscando mensaje 'BUEN DIA TE DEJO LA LISTA DE HOY' en tiempo real...")
            
            # Hacer scroll hacia arriba para cargar M√ÅS mensajes hist√≥ricos
            try:
                chat_container = None
                selectores_chat = [
                    '//div[@data-testid="chat-history"]',
                    '//div[@data-testid="conversation-panel-messages"]', 
                    '//div[contains(@class, "copyable-area")]'
                ]
                
                for selector in selectores_chat:
                    try:
                        chat_container = self.driver.find_element(By.XPATH, selector)
                        break
                    except:
                        continue
                
                if chat_container:
                    print("   üìú Cargando TODOS los mensajes hist√≥ricos disponibles...")
                    # Hacer muchos m√°s scrolls para cargar mensajes muy antiguos
                    for i in range(20):  # Incrementado de 5 a 20
                        self.driver.execute_script("arguments[0].scrollTop = Math.max(0, arguments[0].scrollTop - arguments[0].clientHeight * 2);", chat_container)
                        time.sleep(0.5)
                    
                    print("   ‚úÖ Carga completa de mensajes hist√≥ricos")
                    
            except Exception as e:
                print(f"   ‚ö†Ô∏è Error cargando mensajes hist√≥ricos: {e}")
            
            selectores_mensaje = [
                '//div[contains(@class, "message")]//span[contains(@class, "selectable-text")]',
                '//div[contains(@class, "copyable-text")]//span',
                '//span[@class="selectable-text copyable-text"]',
                '//div[@data-testid="msg-container"]//span',
                '//span[contains(@class, "selectable-text")]',
                '//*[contains(@class, "copyable-text")]',
                '//div[contains(@class, "message")]//div[contains(@class, "copyable-text")]'  # Nuevo selector
            ]
            
            total_mensajes_revisados = 0
            
            for i, selector in enumerate(selectores_mensaje):
                try:
                    print(f"   üîé Selector {i+1}/{len(selectores_mensaje)}: Buscando mensajes...")
                    elementos = self.driver.find_elements(By.XPATH, selector)
                    print(f"   üìä Encontrados {len(elementos)} elementos con este selector")
                    
                    for elemento in elementos:
                        try:
                            texto = elemento.text.strip()
                            total_mensajes_revisados += 1
                            
                            if texto and len(texto) > 20:
                                texto_upper = texto.upper()
                                
                                # Buscar mensaje que contenga "BUEN DIA TE DEJO LA LISTA DE HOY" (m√°s flexible)
                                if ("BUEN DIA TE DEJO LA LISTA DE HOY" in texto_upper or
                                    "BUEN D√çA TE DEJO LA LISTA DE HOY" in texto_upper):
                                    
                                    print(f"   üéØ ¬°MENSAJE 'BUEN DIA' ENCONTRADO!")
                                    print(f"   üìä Longitud: {len(texto)} caracteres")
                                    print(f"   üìù Primeros 200 caracteres: '{texto[:200]}...'")
                                    print(f"   üìù √öltimos 100 caracteres: '...{texto[-100:]}'")
                                    return [texto]
                                    
                        except Exception as e:
                            continue
                            
                except Exception as e:
                    print(f"   ‚ö†Ô∏è Error con selector {i+1}: {e}")
                    continue
            
            print(f"   üìä Total mensajes revisados en extracci√≥n: {total_mensajes_revisados}")
            print("   ‚ö†Ô∏è No se encontr√≥ mensaje 'BUEN DIA TE DEJO LA LISTA DE HOY' en extracci√≥n")
            return []
                
        except Exception as e:
            print(f"   ‚ùå Error extrayendo mensajes por contenido: {e}")
            return []

    def extraer_mensajes_desde_ultima_etiqueta(self):
        """Extraer mensajes desde la √∫ltima etiqueta de fecha encontrada - CON M√âTODO MEJORADO"""
        try:
            print("üìù Buscando mensajes de hoy con m√©todo inteligente...")
            
            # M√âTODO 1: Buscar por contenido de texto (m√°s confiable)
            mensajes_contenido = self.extraer_mensajes_por_contenido()
            if mensajes_contenido:
                print("   ‚úÖ Mensajes encontrados por an√°lisis de contenido")
                return mensajes_contenido
            
            print("   ‚ö†Ô∏è M√©todo de contenido no encontr√≥ mensajes, intentando m√©todo de etiquetas DOM...")
            
            # M√âTODO 2: Buscar por etiquetas DOM (fallback)
            return self.extraer_mensajes_por_etiquetas_dom()
            
        except Exception as e:
            print(f"‚ùå Error en extracci√≥n de mensajes: {e}")
            return []
    
    def extraer_mensajes_por_etiquetas_dom(self):
        """M√©todo original de extracci√≥n por etiquetas DOM"""
        try:
            print("ÔøΩ Buscando √∫ltima etiqueta de fecha...")
            
            # Buscar todas las etiquetas de fecha (Hoy, Ayer, fechas espec√≠ficas)
            # Incluir el selector espec√≠fico proporcionado para el elemento "Hoy"
            selectores_fecha = [
                # Selector espec√≠fico para el elemento "Hoy" con las clases exactas
                '//span[contains(@class, "x140p0ai") and contains(@class, "x1gufx9m") and contains(@class, "x1s928wv") and text()="Hoy"]',
                # Selector m√°s general pero espec√≠fico para "Hoy"
                '//span[contains(@class, "x140p0ai") and text()="Hoy"]',
                # Selectores originales como fallback
                '//span[contains(@class, "x140p0ai") and (text()="Hoy" or text()="Ayer" or text()="Today" or text()="Yesterday")]',
                '//span[text()="Hoy" or text()="Ayer" or text()="Today" or text()="Yesterday"]',
                '//div[contains(@class, "x1n2onr6")]//span[contains(@class, "x140p0ai")]'
            ]
            
            ultima_etiqueta = None
            etiqueta_hoy_encontrada = False
            
            for selector in selectores_fecha:
                try:
                    etiquetas = self.driver.find_elements(By.XPATH, selector)
                    if etiquetas:
                        # Priorizar espec√≠ficamente la etiqueta "Hoy"
                        for etiqueta in reversed(etiquetas):  # Empezar por las m√°s recientes
                            texto_etiqueta = etiqueta.text.strip()
                            if texto_etiqueta in ["Hoy", "Today"]:
                                ultima_etiqueta = etiqueta
                                etiqueta_hoy_encontrada = True
                                print(f"   üéØ Etiqueta 'Hoy' encontrada: '{texto_etiqueta}'")
                                break
                        
                        # Si encontramos "Hoy", salir del bucle principal
                        if etiqueta_hoy_encontrada:
                            break
                            
                        # Si no encontramos "Hoy", usar la √∫ltima etiqueta como fallback
                        if not ultima_etiqueta:
                            ultima_etiqueta = etiquetas[-1]
                            texto_etiqueta = ultima_etiqueta.text
                            print(f"   ‚úÖ √öltima etiqueta encontrada (fallback): '{texto_etiqueta}'")
                except:
                    continue
            
            if not ultima_etiqueta:
                print("   ‚ö†Ô∏è No se encontr√≥ ninguna etiqueta de fecha")
                return []
            
            # Verificar si realmente encontramos la etiqueta "Hoy"
            texto_final = ultima_etiqueta.text.strip()
            if not etiqueta_hoy_encontrada:
                print(f"   ‚ö†Ô∏è ADVERTENCIA: No se encontr√≥ etiqueta 'Hoy', usando '{texto_final}' como fallback")
                print("   üí° Esto podr√≠a significar que no hay mensajes de hoy o que la estructura del DOM cambi√≥")
            else:
                print(f"   ‚úÖ Confirmado: Procesando mensajes desde etiqueta 'Hoy'")
            
            # Buscar todos los mensajes que est√°n despu√©s de esta etiqueta
            textos = []
            
            try:
                # Encontrar el contenedor padre de la etiqueta
                contenedor_etiqueta = ultima_etiqueta
                for _ in range(10):  # Subir hasta 10 niveles para encontrar el contenedor principal
                    contenedor_etiqueta = contenedor_etiqueta.find_element(By.XPATH, '..')
                    
                    # Buscar todos los mensajes siguientes en el chat
                    selectores_mensajes = [
                        './/following::div[contains(@class, "copyable-text")]',
                        './/following::span[contains(@class, "selectable-text")]',
                        './/following::div[@data-testid="msg-container"]//span',
                        './/following::div[contains(@class, "message")]//span[contains(@class, "selectable-text")]'
                    ]
                    
                    for selector_msg in selectores_mensajes:
                        try:
                            mensajes = contenedor_etiqueta.find_elements(By.XPATH, selector_msg)
                            if mensajes:
                                print(f"   üìã Encontrados {len(mensajes)} mensajes despu√©s de la etiqueta")
                                for msg in mensajes:
                                    texto = msg.text.strip()
                                    if texto and len(texto) > 2:
                                        textos.append(texto)
                                if textos:
                                    break
                        except:
                            continue
                    
                    if textos:
                        break
                        
            except Exception as e:
                print(f"   ‚ö†Ô∏è Error buscando mensajes despu√©s de etiqueta: {e}")
            
            # Si no encontr√≥ mensajes con el m√©todo anterior, usar m√©todo directo
            if not textos:
                print("   üîÑ Intentando m√©todo directo...")
                try:
                    # Buscar mensajes directamente despu√©s de cualquier etiqueta de fecha
                    mensajes_directos = self.driver.find_elements(By.XPATH, 
                        '//span[text()="Hoy" or text()="Ayer"]/ancestor::div[1]/following-sibling::div//span[contains(@class, "selectable-text")]'
                    )
                    
                    if not mensajes_directos:
                        # M√©todo alternativo m√°s amplio
                        mensajes_directos = self.driver.find_elements(By.XPATH, 
                            '//div[contains(@class, "copyable-text")]'
                        )
                        # Tomar solo los √∫ltimos 20 mensajes
                        mensajes_directos = mensajes_directos[-20:] if len(mensajes_directos) > 20 else mensajes_directos
                    
                    for msg in mensajes_directos:
                        texto = msg.text.strip()
                        if texto and len(texto) > 2:
                            textos.append(texto)
                            
                except Exception as e:
                    print(f"   ‚ö†Ô∏è Error en m√©todo directo: {e}")
            
            # Eliminar duplicados manteniendo orden
            textos_unicos = []
            for texto in textos:
                if texto not in textos_unicos:
                    textos_unicos.append(texto)
            
            print(f"üìä Total mensajes extra√≠dos desde √∫ltima etiqueta: {len(textos_unicos)}")
            return textos_unicos
            
        except Exception as e:
            print(f"‚ùå Error extrayendo mensajes desde √∫ltima etiqueta: {e}")
            return []
    
    def extraer_mensajes_fallback(self):
        """M√©todo de fallback para extraer mensajes si no se encuentra la etiqueta 'Hoy'"""
        try:
            print("üîÑ Ejecutando extracci√≥n de fallback...")
            
            # Intentar m√∫ltiples selectores para los mensajes
            selectores_mensajes = [
                '//div[@class="copyable-text"]',
                '//div[contains(@class, "copyable-text")]',
                '//span[@class="_ao3e selectable-text copyable-text"]',
                '//div[@data-testid="conversation-panel-messages"]//span',
                '//div[contains(@class, "message")]//span[contains(@class, "selectable-text")]'
            ]
            
            textos = []
            mensajes_encontrados = False
            
            for selector in selectores_mensajes:
                try:
                    mensajes_divs = self.driver.find_elements(By.XPATH, selector)
                    if mensajes_divs:
                        print(f"   ‚úÖ Mensajes encontrados con selector fallback: {selector}")
                        for msg in mensajes_divs:
                            texto = msg.text.strip()
                            if texto and len(texto) > 2:
                                textos.append(texto)
                        mensajes_encontrados = True
                        break
                except Exception as e:
                    continue
            
            if not mensajes_encontrados:
                print("   ‚ö†Ô∏è M√©todo de fallback tambi√©n fall√≥")
                return []
            
            # Eliminar duplicados manteniendo orden
            textos_unicos = []
            for texto in textos:
                if texto not in textos_unicos:
                    textos_unicos.append(texto)
            
            print(f"üìä Total mensajes fallback extra√≠dos: {len(textos_unicos)}")
            return textos_unicos
            
        except Exception as e:
            print(f"‚ùå Error en m√©todo de fallback: {e}")
            return []
    
    def guardar_archivo_txt(self, textos, archivo_salida, nombre_proveedor):
        """Guardar mensajes en archivo .txt"""
        try:
            # Crear directorio si no existe
            os.makedirs("output", exist_ok=True)
            
            # Escribir archivo
            with open(archivo_salida, 'w', encoding='utf-8') as file:
                # Escribir encabezado
                file.write(f"# Lista de precios - {nombre_proveedor}\n")
                file.write(f"# Extra√≠do autom√°ticamente el {datetime.now().strftime('%d/%m/%Y %H:%M')}\n")
                file.write("# " + "="*60 + "\n\n")
                
                # Escribir mensajes
                for texto in textos:
                    file.write(texto + "\n")
            
            print(f"‚úÖ Archivo guardado: {archivo_salida}")
            print(f"üìÑ L√≠neas escritas: {len(textos)}")
            return True
            
        except Exception as e:
            print(f"‚ùå Error guardando archivo {archivo_salida}: {e}")
            return False
    
    def limpiar_busqueda(self):
        """Limpiar el campo de b√∫squeda para el siguiente proveedor"""
        try:
            print("üßπ Limpiando campo de b√∫squeda...")
            search_box = WebDriverWait(self.driver, 5).until(
                EC.presence_of_element_located((By.XPATH, '//div[@contenteditable="true"][@data-tab="3"]'))
            )
            
            # Hacer clic y limpiar
            self.driver.execute_script("arguments[0].click();", search_box)
            time.sleep(0.5)
            search_box.send_keys('\ue009' + 'a')  # Ctrl+A
            time.sleep(0.3)
            search_box.send_keys('\ue017')  # Delete
            time.sleep(0.5)
            
            # Limpiar variables del mensaje "BUEN DIA" para el siguiente proveedor
            self.mensaje_buen_dia_encontrado = False
            self.elemento_mensaje_buen_dia = None
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error limpiando b√∫squeda: {e}")

    def procesar_proveedor(self, nombre_proveedor, config):
        """Procesar un proveedor espec√≠fico"""
        print(f"\n{'='*60}")
        print(f"üè™ PROCESANDO: {nombre_proveedor}")
        print(f"{'='*60}")
        
        # Abrir chat
        if not self.buscar_y_abrir_chat(nombre_proveedor, config):
            return False
        
        # NUEVA VERIFICACI√ìN: Comprobar si hay mensajes de hoy antes de procesar
        if not self.verificar_chat_tiene_mensajes_hoy():
            print(f"‚è≠Ô∏è  SALTANDO {nombre_proveedor}: No tiene mensajes con 'BUEN DIA TE DEJO LA LISTA DE HOY'")
            return False
        
        if hasattr(self, 'mensaje_buen_dia_encontrado') and self.mensaje_buen_dia_encontrado:
            print(f"‚úÖ Confirmado: {nombre_proveedor} tiene mensaje 'BUEN DIA TE DEJO LA LISTA DE HOY' - Continuando procesamiento...")
        else:
            print(f"‚úÖ Confirmado: {nombre_proveedor} tiene mensajes v√°lidos - Continuando procesamiento...")
        
        # Ir al final del chat y expandir mensajes
        if not self.ir_al_final_del_chat():
            return False
        
        # Expandir mensajes largos solo en la zona reciente
        self.expandir_mensajes_largos()
        
        # Extraer mensajes
        mensajes = self.extraer_mensajes_desde_ultima_etiqueta()
        if not mensajes:
            print(f"‚ö†Ô∏è No se encontraron mensajes para {nombre_proveedor}")
            return False
        
        # Filtrar mensajes del d√≠a
        mensajes_filtrados = self.filtrar_mensajes_del_dia(mensajes, config["filtro_inicio"])
        print(f"üéØ Mensajes filtrados del d√≠a: {len(mensajes_filtrados)}")
        
        if not mensajes_filtrados:
            print(f"‚ö†Ô∏è No se encontraron mensajes del d√≠a para {nombre_proveedor}")
            print(f"‚õî No se guardar√°n mensajes viejos ni fallback.")
        
        # Guardar archivo
        exito = self.guardar_archivo_txt(
            mensajes_filtrados, 
            config["archivo_salida"], 
            nombre_proveedor
        )
        
        # Limpiar b√∫squeda para el pr√≥ximo proveedor
        self.limpiar_busqueda()
        
        return exito
    
    def procesar_todos_proveedores(self):
        """Procesar solo el proveedor GcGroup autom√°ticamente"""
        print("üöÄ INICIANDO AUTOMATIZACI√ìN DE WHATSAPP SOLO PARA GcGroup")
        print("="*70)
        
        # Estad√≠sticas de eficiencia
        chats_procesados = 0
        chats_saltados = 0
        
        # Configurar navegador
        if not self.configurar_navegador():
            return False
        
        resultados = {}
        try:
            nombre_proveedor = "GcGroup"
            config = self.proveedores[nombre_proveedor]
            
            # Intentar procesar proveedor
            exito = self.procesar_proveedor(nombre_proveedor, config)
            
            if exito:
                chats_procesados += 1
            else:
                chats_saltados += 1
                
            resultados[nombre_proveedor] = exito
            
            # Mostrar estad√≠sticas de eficiencia
            print(f"\n{'='*70}")
            print("üìä ESTAD√çSTICAS DE EFICIENCIA")
            print(f"{'='*70}")
            print(f"‚úÖ Chats procesados (con mensajes de hoy): {chats_procesados}")
            print(f"‚è≠Ô∏è  Chats saltados (sin mensajes de hoy): {chats_saltados}")
            print(f"‚ö° Eficiencia: Se evit√≥ procesar {chats_saltados} chat(s) innecesario(s)")
            
            # Mostrar resumen final
            self.mostrar_resumen(resultados)
            # Si fue exitoso, ejecutar procesamiento autom√°tico
            if exito:
                print("\n‚è≥ Ejecutando procesamiento autom√°tico en 3 segundos...")
                time.sleep(3)
                self.ejecutar_procesamiento_automatico()
            else:
                print("\n‚ö†Ô∏è No se ejecutar√° el procesamiento autom√°tico porque no hubo extracci√≥n exitosa")
            return True
        except Exception as e:
            print(f"‚ùå Error general: {e}")
            return False
        finally:
            if self.driver:
                self.driver.quit()
                print("üîí Navegador cerrado")
    
    def ejecutar_procesamiento_automatico(self):
        """Ejecutar scripts de procesamiento autom√°ticamente"""
        print(f"\n{'='*70}")
        print("üîÑ INICIANDO PROCESAMIENTO AUTOM√ÅTICO")
        print(f"{'='*70}")
        
        scripts_a_ejecutar = [
            {
                "nombre": "procesar_gcgroup_refactor.py",
                "descripcion": "Procesamiento espec√≠fico de GCGroup con nueva f√≥rmula de precios"
            }
        ]
        
        for script in scripts_a_ejecutar:
            print(f"\nüöÄ Ejecutando: {script['nombre']}")
            print(f"üìù {script['descripcion']}")
            print("-" * 50)
            
            try:
                # Verificar que el archivo del script existe
                if not os.path.exists(script['nombre']):
                    print(f"‚ùå Archivo no encontrado: {script['nombre']}")
                    continue
                
                # Ejecutar el script y capturar la salida
                resultado = subprocess.run(
                    [sys.executable, script['nombre']], 
                    capture_output=True, 
                    text=True,
                    encoding='utf-8',
                    cwd=os.getcwd()
                )
                
                # Mostrar la salida del script
                if resultado.stdout:
                    # Filtrar l√≠neas vac√≠as y limpiar salida
                    lineas = [linea for linea in resultado.stdout.split('\n') if linea.strip()]
                    for linea in lineas:
                        # Remover caracteres que pueden causar problemas en terminal Windows
                        linea_limpia = ''.join(char for char in linea if ord(char) < 127 or char in '√°√©√≠√≥√∫√º√±√Å√â√ç√ì√ö√ú√ë')
                        print(f"   {linea_limpia}")
                
                if resultado.stderr:
                    print(f"‚ö†Ô∏è Advertencias/Errores:")
                    lineas_error = [linea for linea in resultado.stderr.split('\n') if linea.strip()]
                    for linea in lineas_error:
                        linea_limpia = ''.join(char for char in linea if ord(char) < 127 or char in '√°√©√≠√≥√∫√º√±√Å√â√ç√ì√ö√ú√ë')
                        print(f"   {linea_limpia}")
                
                if resultado.returncode == 0:
                    print(f"‚úÖ {script['nombre']} ejecutado exitosamente")
                else:
                    print(f"‚ùå Error ejecutando {script['nombre']} (c√≥digo: {resultado.returncode})")
                    
            except Exception as e:
                print(f"‚ùå Error ejecutando {script['nombre']}: {e}")
        
        print(f"\n{'='*70}")
        print("üéâ PROCESAMIENTO AUTOM√ÅTICO COMPLETADO")
        print(f"{'='*70}")
        print("üìÅ Revisa la carpeta 'output/' para ver todos los archivos generados:")
        print("   ‚Ä¢ Lista extra√≠da de WhatsApp (TXT)")
        print("   ‚Ä¢ Lista procesada con colores (Excel)")
        print("   ‚Ä¢ Productos categorizados (JSON)")
        print("   ‚Ä¢ Archivo de difusi√≥n para WhatsApp (TXT)")

    def mostrar_resumen(self, resultados):
        """Mostrar resumen de la ejecuci√≥n"""
        print(f"\n{'='*70}")
        print("üìã RESUMEN DE EXTRACCI√ìN")
        print(f"{'='*70}")
        
        exitosos = 0
        fallidos = 0
        
        for proveedor, exito in resultados.items():
            estado = "‚úÖ EXITOSO" if exito else "‚ùå FALLIDO"
            print(f"   {proveedor}: {estado}")
            if exito:
                exitosos += 1
            else:
                fallidos += 1
        
        print(f"\nüìä ESTAD√çSTICAS:")
        print(f"   ‚úÖ Exitosos: {exitosos}")
        print(f"   ‚ùå Fallidos: {fallidos}")
        print(f"   üìÅ Archivos generados en carpeta 'output/'")
        
        if exitosos > 0:
            print(f"\nüéâ ¬°Extracci√≥n de WhatsApp completada!")
            print(f"ÔøΩ Continuando con procesamiento autom√°tico...")
        else:
            print(f"\n‚ö†Ô∏è No se pudo extraer informaci√≥n de ning√∫n proveedor")
        
        print(f"{'='*70}")

def main():
    """Funci√≥n principal"""
    automatizador = AutomatizadorWSP()
    automatizador.procesar_todos_proveedores()

if __name__ == "__main__":
    main()